
The mistakes I made in learning Vue.js

一、Typos:
el:'#example',
el:'example',
/*need '#' selector!!!*/

el:'...'  NOT
ele:'...'

methods: {...} NOT
method: {...}

Carefully distinguish :style and :class!!

二、Syntax:
1.{{ msg }} should be an attribute of vue instance's data attribute:
    RIGHT:
        ...
        data: {
            msg:"I love you~"
        }
    WRONG:
        ...
        msg:"I love you~"
        ...

2.Control data object need "$":
     app3.$data.dynamicClass="font-green";

3.Divide instance by ';' NOT ',':
    var vm1=new Vue({});    NOT     var vm1=new Vue({}),
    var vm2=new Vue({})                     var vm2=new Vue({})

4.v-bind:class="classObject" ONLY support one object,v-bind:class="classObjectOne classObjectTwo" is WRONG.
    <div class="app-1" v-bind:class="classObject classObjectSecond"></div>
    - invalid expression: v-bind:class="classObject classObjectSecond"

    If we need apply a list of class,we can use Array syntax:
    <div v-bind:class="[activeClass, errorClass]">

    data: {
      activeClass: 'active',
      errorClass: 'text-danger'
    }

5.Leap over section: "class and style-apply on component" , "components and v-for" in section "list rendering"
"components and v-for" in list-rendering,

6.methods and computed is different:
            /*通过Vue实例的methods接口，我们在模板中调用reversedMessage函数同样实现需求；
             methods与computed方法的区别在于：computed的数据依赖于app.message，
             只要message未变，则访问ReverseMessage计算属性将立即返回之前的计算结果，而methods在每次重新渲染时总是执行函数；
             如果有缓存需要，请使用computed方法，否则使用methods替代；
             Performance!! Performance!! Performance!! Performance!! Performance!! Performance!! */
    ,
            computed: {
                evenNumbers: function () {
                    return this.numbers.filter(function (n) {
                        return n%2===0
                    })
                }
            }

    ,
            methods: {
                even: function (numbers) {
                    return numbers.filter(function (n) {
                        return n%2!=0
                    })
                }
            }

7.data: {
    ...
    options: [
        {text: "you",value:"A"},
        {text: "you",value:"A"},
        {text: "you",value:"A"}
    ]
}   //options can not be a object???

8.In component template,its data must be a FUNCTION and return a OBJECT.

9.Can not understand the Component...

10.data :{
    items [...]    NOT items {...}
}

11.Use v-bind:src="item.img" instead of src="item.img" in 2.0.
The browser will parse the str in src="item.img" as url,so this method is WRONG.
So does the alt and title and so on.

12.The :class="{className:objProperty}" must contain {} as a symbol of Object or Array!!

13.:class="{'md-show':delModalShow}" If the class is kebab-case(短横线隔开式),it must be wrapper as a str!!!

14.@click.prevent="showDelModal();saveTargetItem(item)",currently I just know this syntax for binding multiple func.
It can be  optimize to a single method, @click.prevent="showDelModal(item)"

15.The scope inner the directive is the current instance,it doesn't need this anymore.

16.As a small framework(19kb min+gzip),vue.js has the ability to render the page,it is more performant than jquery and handlebars!

17.The declaration of components should be earlier than the use of it:

<div class="app">
    <example></example>
</div>

<script>
    Vue.component('example', {
        template: '<span @click="updateMessage">{{ message }}</span>',
    })

    var vm = new Vue({
        el:'.app',
        data:{
            a:1,
            someObj:{}
        },
    })
    //here is invalid!
    Vue.component('example', {
        template: '<span @click="updateMessage">{{ message }}</span>',
    })

18.感觉只靠读文档难以融会贯通啊！！！

三、Error and Warning：
1.If a function is not defined,the error will be reminded:
    vue.js:525 [Vue warn]: Error when rendering root instance:
    ...
    vue.js:2229 Uncaught ReferenceError: conLog is not defined

2.[Vue warn]:
<input v-model="activeProp" value="try input something...">:
  inline value attributes will be ignored when using v-model. Declare initial values in the component's data option instead.
